{"ast":null,"code":"var _jsxFileName = \"/frontend/src/camera_image.tsx\",\n  _s = $RefreshSig$();\n// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CameraComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [imageDataUrl, setImageDataUrl] = useState(null);\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment'\n          },\n          audio: false\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (err) {\n        console.error('カメラの起動に失敗しました:', err);\n      }\n    };\n    startCamera();\n  }, []);\n  const handleCapture = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataUrl = canvas.toDataURL('image/png');\n    setImageDataUrl(dataUrl);\n  };\n  const handleUpload = async () => {\n    if (!imageDataUrl) return;\n    const blob = await (await fetch(imageDataUrl)).blob();\n    const formData = new FormData();\n    formData.append('image', blob, 'photo.png');\n    try {\n      const res = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData\n      });\n      if (!res.ok) throw new Error('アップロード失敗');\n      alert('✅ 画像をアップロードしました');\n    } catch (err) {\n      console.error(err);\n      alert('❌ 画像の送信に失敗しました');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: \"640\",\n      height: \"480\",\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCapture,\n      children: \"\\uD83D\\uDCF8 \\u30B7\\u30E3\\u30C3\\u30BF\\u30FC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), imageDataUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageDataUrl,\n        alt: \"\\u64AE\\u5F71\\u753B\\u50CF\",\n        width: \"640\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"\\u2601\\uFE0F \\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u306B\\u9001\\u4FE1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraComponent, \"gnXN/9MgISD2MNUrkqi3P/VaAZQ=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","CameraComponent","_s","videoRef","canvasRef","imageDataUrl","setImageDataUrl","startCamera","stream","navigator","mediaDevices","getUserMedia","video","facingMode","audio","current","srcObject","err","console","error","handleCapture","canvas","context","getContext","width","videoWidth","height","videoHeight","drawImage","dataUrl","toDataURL","handleUpload","blob","fetch","formData","FormData","append","res","method","body","ok","Error","alert","children","ref","autoPlay","playsInline","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","display","src","alt","_c","$RefreshReg$"],"sources":["/frontend/src/camera_image.tsx"],"sourcesContent":["// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n\n//\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst CameraComponent: React.FC = () => {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [imageDataUrl, setImageDataUrl] = useState<string | null>(null);\n\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { facingMode: 'environment' },\n          audio: false,\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (err) {\n        console.error('カメラの起動に失敗しました:', err);\n      }\n    };\n\n    startCamera();\n  }, []);\n\n  const handleCapture = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    const dataUrl = canvas.toDataURL('image/png');\n    setImageDataUrl(dataUrl);\n  };\n\n  const handleUpload = async () => {\n    if (!imageDataUrl) return;\n\n    const blob = await (await fetch(imageDataUrl)).blob();\n    const formData = new FormData();\n    formData.append('image', blob, 'photo.png');\n\n    try {\n      const res = await fetch('http://localhost:5000/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!res.ok) throw new Error('アップロード失敗');\n      alert('✅ 画像をアップロードしました');\n    } catch (err) {\n      console.error(err);\n      alert('❌ 画像の送信に失敗しました');\n    }\n  };\n\n  return (\n    <div>\n      <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n      <br />\n      <button onClick={handleCapture}>📸 シャッター</button>\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n      <br />\n      {imageDataUrl && (\n        <div>\n          <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n          <br />\n          <button onClick={handleUpload}>☁️ バックエンドに送信</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CameraComponent;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}