{"ast":null,"code":"var _jsxFileName = \"/frontend/src/camera_image.tsx\",\n  _s = $RefreshSig$();\n// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' },\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png');\n//     setImageDataUrl(dataUrl);\n//   };\n\n//   const handleUpload = async () => {\n//     if (!imageDataUrl) return;\n\n//     const blob = await (await fetch(imageDataUrl)).blob();\n//     const formData = new FormData();\n//     formData.append('image', blob, 'photo.png');\n\n//     try {\n//       const res = await fetch('http://localhost:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (!res.ok) throw new Error('アップロード失敗');\n//       alert('✅ 画像をアップロードしました');\n//     } catch (err) {\n//       console.error(err);\n//       alert('❌ 画像の送信に失敗しました');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <button onClick={handleUpload}>☁️ バックエンドに送信</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CameraComponent = () => {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [imageDataUrl, setImageDataUrl] = useState(null); // 表示用画像URL\n  const [loading, setLoading] = useState(false); // ローディング状態\n  const [label, setLabel] = useState(null); // 推論されたラベル名\n\n  // カメラ起動\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment'\n          },\n          audio: false\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (err) {\n        console.error('カメラの起動に失敗しました:', err);\n      }\n    };\n    startCamera();\n  }, []);\n\n  // 撮影処理\n  const handleCapture = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n    const context = canvas.getContext('2d');\n    if (!context) return;\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    const dataUrl = canvas.toDataURL('image/png');\n    setImageDataUrl(dataUrl);\n  };\n\n  // Flaskバックエンドへ送信しYOLOで推論\n  const handleUpload = async () => {\n    if (!imageDataUrl) return;\n    setLoading(true);\n    try {\n      const blob = await (await fetch(imageDataUrl)).blob();\n      const formData = new FormData();\n      formData.append('image', blob, 'photo.png');\n      const response = await fetch('http://localhost:5000/predict', {\n        method: 'POST',\n        body: formData\n      });\n      // const response = await fetch('http://server:5000/predict', {\n      //   method: 'POST',\n      //   body: formData,\n      // });\n\n      if (!response.ok) throw new Error('バックエンドエラー');\n\n      // const resultBlob = await response.blob();\n      // const resultUrl = URL.createObjectURL(resultBlob);\n      // setImageDataUrl(resultUrl); // 結果画像を表示\n\n      const result = await response.json();\n      const imgSrc = `data:image/jpeg;base64,${result.image}`;\n      const labels = result.labels;\n      setImageDataUrl(imgSrc);\n      setLabel(labels.join(', ')); // 推論されたラベル名を文字列として表示\n      print();\n    } catch (err) {\n      console.error(err);\n      alert('❌ 画像の送信に失敗しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCF8 \\u30AB\\u30E1\\u30E9\\u30A2\\u30D7\\u30EA\\uFF08YOLO\\u63A8\\u8AD6\\uFF09\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      width: \"640\",\n      height: \"480\",\n      autoPlay: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCapture,\n      children: \"\\uD83D\\uDCF7 \\u30B7\\u30E3\\u30C3\\u30BF\\u30FC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: !imageDataUrl || loading,\n      children: \"\\u2601\\uFE0F \\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u306B\\u9001\\u4FE1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '1rem'\n      },\n      children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uD83D\\uDD04 \\u51E6\\u7406\\u4E2D...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 21\n      }, this), imageDataUrl && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageDataUrl,\n          alt: \"\\u64AE\\u5F71\\u30FB\\u63A8\\u8AD6\\u7D50\\u679C\\u753B\\u50CF\",\n          width: \"640\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: imageDataUrl,\n          download: \"result.png\",\n          children: \"\\u753B\\u50CF\\u3092\\u4FDD\\u5B58\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n_s(CameraComponent, \"KQtaci1RE7xFEYX94HRKRhqYW70=\");\n_c = CameraComponent;\nexport default CameraComponent;\nvar _c;\n$RefreshReg$(_c, \"CameraComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CameraComponent","_s","videoRef","canvasRef","imageDataUrl","setImageDataUrl","loading","setLoading","label","setLabel","startCamera","stream","navigator","mediaDevices","getUserMedia","video","facingMode","audio","current","srcObject","err","console","error","handleCapture","canvas","context","getContext","width","videoWidth","height","videoHeight","drawImage","dataUrl","toDataURL","handleUpload","blob","fetch","formData","FormData","append","response","method","body","ok","Error","result","json","imgSrc","image","labels","join","print","alert","style","textAlign","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","onClick","disabled","display","marginTop","src","alt","href","download","_c","$RefreshReg$"],"sources":["/frontend/src/camera_image.tsx"],"sourcesContent":["// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n\n//:K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null);\n\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' },\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png');\n//     setImageDataUrl(dataUrl);\n//   };\n\n//   const handleUpload = async () => {\n//     if (!imageDataUrl) return;\n\n//     const blob = await (await fetch(imageDataUrl)).blob();\n//     const formData = new FormData();\n//     formData.append('image', blob, 'photo.png');\n\n//     try {\n//       const res = await fetch('http://localhost:5000/upload', {\n//         method: 'POST',\n//         body: formData,\n//       });\n\n//       if (!res.ok) throw new Error('アップロード失敗');\n//       alert('✅ 画像をアップロードしました');\n//     } catch (err) {\n//       console.error(err);\n//       alert('❌ 画像の送信に失敗しました');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <button onClick={handleUpload}>☁️ バックエンドに送信</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\nimport React, { useEffect, useRef, useState } from 'react';\n\nconst CameraComponent: React.FC = () => {\n  const videoRef = useRef<HTMLVideoElement | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 表示用画像URL\n  const [loading, setLoading] = useState(false); // ローディング状態\n  const [label, setLabel] = useState<string | null>(null);                   // 推論されたラベル名\n\n  // カメラ起動\n  useEffect(() => {\n    const startCamera = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: { facingMode: 'environment' },\n          audio: false,\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n        }\n      } catch (err) {\n        console.error('カメラの起動に失敗しました:', err);\n      }\n    };\n\n    startCamera();\n  }, []);\n\n  // 撮影処理\n  const handleCapture = () => {\n    const video = videoRef.current;\n    const canvas = canvasRef.current;\n    if (!video || !canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n    const dataUrl = canvas.toDataURL('image/png');\n    setImageDataUrl(dataUrl);\n  };\n\n  // Flaskバックエンドへ送信しYOLOで推論\n  const handleUpload = async () => {\n    if (!imageDataUrl) return;\n\n    setLoading(true);\n\n    try {\n      const blob = await (await fetch(imageDataUrl)).blob();\n      const formData = new FormData();\n      formData.append('image', blob, 'photo.png');\n\n      const response = await fetch('http://localhost:5000/predict', {\n        method: 'POST',\n        body: formData,\n      });\n      // const response = await fetch('http://server:5000/predict', {\n      //   method: 'POST',\n      //   body: formData,\n      // });\n\n      if (!response.ok) throw new Error('バックエンドエラー');\n\n      // const resultBlob = await response.blob();\n      // const resultUrl = URL.createObjectURL(resultBlob);\n      // setImageDataUrl(resultUrl); // 結果画像を表示\n\n      const result = await response.json();\n      const imgSrc = `data:image/jpeg;base64,${result.image}`;\n      const labels = result.labels;\n      setImageDataUrl(imgSrc);\n      setLabel(labels.join(', ')); // 推論されたラベル名を文字列として表示\n      print()\n    \n    } catch (err) {\n      console.error(err);\n      alert('❌ 画像の送信に失敗しました');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h2>📸 カメラアプリ（YOLO推論）</h2>\n\n      <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n      <br />\n\n      <button onClick={handleCapture}>📷 シャッター</button>\n      <button onClick={handleUpload} disabled={!imageDataUrl || loading}>\n        ☁️ バックエンドに送信\n      </button>\n\n      <canvas ref={canvasRef} style={{ display: 'none' }} />\n\n      <div style={{ marginTop: '1rem' }}>\n        {loading && <p>🔄 処理中...</p>}\n        {imageDataUrl && !loading && (\n          <>\n            <img src={imageDataUrl} alt=\"撮影・推論結果画像\" width=\"640\" />\n            <br />\n            <a href={imageDataUrl} download=\"result.png\">画像を保存</a>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CameraComponent;\n\n\n\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3D,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtC,MAAMC,QAAQ,GAAGR,MAAM,CAA0B,IAAI,CAAC;EACtD,MAAMS,SAAS,GAAGT,MAAM,CAA2B,IAAI,CAAC;EACxD,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAC;EACvE,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC/C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAgB,IAAI,CAAC,CAAC,CAAmB;;EAE3E;EACAF,SAAS,CAAC,MAAM;IACd,MAAMiB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;UACvDC,KAAK,EAAE;YAAEC,UAAU,EAAE;UAAc,CAAC;UACpCC,KAAK,EAAE;QACT,CAAC,CAAC;QACF,IAAIf,QAAQ,CAACgB,OAAO,EAAE;UACpBhB,QAAQ,CAACgB,OAAO,CAACC,SAAS,GAAGR,MAAM;QACrC;MACF,CAAC,CAAC,OAAOS,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEF,GAAG,CAAC;MACtC;IACF,CAAC;IAEDV,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMa,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMR,KAAK,GAAGb,QAAQ,CAACgB,OAAO;IAC9B,MAAMM,MAAM,GAAGrB,SAAS,CAACe,OAAO;IAChC,IAAI,CAACH,KAAK,IAAI,CAACS,MAAM,EAAE;IAEvB,MAAMC,OAAO,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IACvC,IAAI,CAACD,OAAO,EAAE;IAEdD,MAAM,CAACG,KAAK,GAAGZ,KAAK,CAACa,UAAU;IAC/BJ,MAAM,CAACK,MAAM,GAAGd,KAAK,CAACe,WAAW;IACjCL,OAAO,CAACM,SAAS,CAAChB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAES,MAAM,CAACG,KAAK,EAAEH,MAAM,CAACK,MAAM,CAAC;IAE3D,MAAMG,OAAO,GAAGR,MAAM,CAACS,SAAS,CAAC,WAAW,CAAC;IAC7C5B,eAAe,CAAC2B,OAAO,CAAC;EAC1B,CAAC;;EAED;EACA,MAAME,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAAC9B,YAAY,EAAE;IAEnBG,UAAU,CAAC,IAAI,CAAC;IAEhB,IAAI;MACF,MAAM4B,IAAI,GAAG,MAAM,CAAC,MAAMC,KAAK,CAAChC,YAAY,CAAC,EAAE+B,IAAI,CAAC,CAAC;MACrD,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,EAAE,WAAW,CAAC;MAE3C,MAAMK,QAAQ,GAAG,MAAMJ,KAAK,CAAC,+BAA+B,EAAE;QAC5DK,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEL;MACR,CAAC,CAAC;MACF;MACA;MACA;MACA;;MAEA,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,WAAW,CAAC;;MAE9C;MACA;MACA;;MAEA,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC,MAAMC,MAAM,GAAI,0BAAyBF,MAAM,CAACG,KAAM,EAAC;MACvD,MAAMC,MAAM,GAAGJ,MAAM,CAACI,MAAM;MAC5B5C,eAAe,CAAC0C,MAAM,CAAC;MACvBtC,QAAQ,CAACwC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;MAC7BC,KAAK,CAAC,CAAC;IAET,CAAC,CAAC,OAAO/B,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBgC,KAAK,CAAC,gBAAgB,CAAC;IACzB,CAAC,SAAS;MACR7C,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEV,OAAA;IAAKwD,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAS,CAAE;IAAAC,QAAA,gBAClC1D,OAAA;MAAA0D,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE1B9D,OAAA;MAAO+D,GAAG,EAAE1D,QAAS;MAACyB,KAAK,EAAC,KAAK;MAACE,MAAM,EAAC,KAAK;MAACgC,QAAQ;MAACC,WAAW;IAAA;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtE9D,OAAA;MAAA2D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEN9D,OAAA;MAAQkE,OAAO,EAAExC,aAAc;MAAAgC,QAAA,EAAC;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACjD9D,OAAA;MAAQkE,OAAO,EAAE7B,YAAa;MAAC8B,QAAQ,EAAE,CAAC5D,YAAY,IAAIE,OAAQ;MAAAiD,QAAA,EAAC;IAEnE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAET9D,OAAA;MAAQ+D,GAAG,EAAEzD,SAAU;MAACkD,KAAK,EAAE;QAAEY,OAAO,EAAE;MAAO;IAAE;MAAAT,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEtD9D,OAAA;MAAKwD,KAAK,EAAE;QAAEa,SAAS,EAAE;MAAO,CAAE;MAAAX,QAAA,GAC/BjD,OAAO,iBAAIT,OAAA;QAAA0D,QAAA,EAAG;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAC3BvD,YAAY,IAAI,CAACE,OAAO,iBACvBT,OAAA,CAAAE,SAAA;QAAAwD,QAAA,gBACE1D,OAAA;UAAKsE,GAAG,EAAE/D,YAAa;UAACgE,GAAG,EAAC,wDAAW;UAACzC,KAAK,EAAC;QAAK;UAAA6B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACtD9D,OAAA;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACN9D,OAAA;UAAGwE,IAAI,EAAEjE,YAAa;UAACkE,QAAQ,EAAC,YAAY;UAAAf,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA,eACtD,CACH;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC1D,EAAA,CA9GID,eAAyB;AAAAuE,EAAA,GAAzBvE,eAAyB;AAgH/B,eAAeA,eAAe;AAAC,IAAAuE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}