{"ast":null,"code":"// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;","map":{"version":3,"names":[],"sources":["/frontend/src/camera_image.tsx"],"sourcesContent":["// import React, {useEffect} from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   useEffect(() => {\n//     const video = document.getElementById('video') as HTMLVideoElement;\n\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         video.srcObject = stream;\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   return (\n//     <div>\n//       <video id=\"video\" width=\"640\" height=\"480\" autoPlay playsInline></video>\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n//K\n// import React, { useEffect, useRef, useState } from 'react';\n\n// const CameraComponent: React.FC = () => {\n//   const videoRef = useRef<HTMLVideoElement | null>(null);     // カメラ映像\n//   const canvasRef = useRef<HTMLCanvasElement | null>(null);   // キャプチャ用\n//   const [imageDataUrl, setImageDataUrl] = useState<string | null>(null); // 画像表示用\n\n//   // カメラ起動処理\n//   useEffect(() => {\n//     const startCamera = async () => {\n//       try {\n//         const stream = await navigator.mediaDevices.getUserMedia({\n//           video: { facingMode: 'environment' }, // 背面カメラ\n//           audio: false,\n//         });\n//         if (videoRef.current) {\n//           videoRef.current.srcObject = stream;\n//         }\n//       } catch (err) {\n//         console.error('カメラの起動に失敗しました:', err);\n//       }\n//     };\n\n//     startCamera();\n//   }, []);\n\n//   // シャッターを押したとき\n//   const handleCapture = () => {\n//     const video = videoRef.current;\n//     const canvas = canvasRef.current;\n//     if (!video || !canvas) return;\n\n//     const context = canvas.getContext('2d');\n//     if (!context) return;\n\n//     canvas.width = video.videoWidth;\n//     canvas.height = video.videoHeight;\n//     context.drawImage(video, 0, 0, canvas.width, canvas.height);\n\n//     const dataUrl = canvas.toDataURL('image/png'); // 画像データ取得\n//     setImageDataUrl(dataUrl); // imgタグに反映\n//   };\n\n//   return (\n//     <div>\n//       <video ref={videoRef} width=\"640\" height=\"480\" autoPlay playsInline />\n//       <br />\n//       <button onClick={handleCapture}>📸 シャッター</button>\n//       <canvas ref={canvasRef} style={{ display: 'none' }} />\n//       <br />\n//       {imageDataUrl && (\n//         <div>\n//           <img src={imageDataUrl} alt=\"撮影画像\" width=\"640\" />\n//           <br />\n//           <a href={imageDataUrl} download=\"captured.png\">画像を保存</a>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CameraComponent;\n\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}