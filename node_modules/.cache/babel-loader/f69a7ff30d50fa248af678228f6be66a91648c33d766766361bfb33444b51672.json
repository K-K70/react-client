{"ast":null,"code":"var _jsxFileName = \"/frontend/src/BackendImage.tsx\",\n  _s = $RefreshSig$();\n// export default BackendImage;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BackendImage = () => {\n  _s();\n  const [backendImageSrc, setBackendImageSrc] = useState(null);\n\n  // バックエンドから画像を取得する関数\n  const fetchBackendImage = async () => {\n    try {\n      const response = await fetch('http://server:5000/predict'); // バックエンドのエンドポイント\n      if (response.ok) {\n        // Blob形式で画像を取得\n        const blob = await response.blob();\n\n        // BlobをURLに変換\n        const imageUrl = URL.createObjectURL(blob);\n        setBackendImageSrc(imageUrl); // 画像URLをstateにセット\n      } else {\n        console.error('画像を取得できませんでした');\n      }\n    } catch (error) {\n      console.error('画像の取得に失敗しました:', error);\n    }\n  };\n\n  // 初回レンダリング時に画像をバックエンドから取得\n  useEffect(() => {\n    fetchBackendImage(); // 画像を取得\n  }, []); // 初回レンダリング時に実行\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"backend-image-area\",\n    children: backendImageSrc ? /*#__PURE__*/_jsxDEV(\"img\", {\n      src: backendImageSrc,\n      alt: \"\\u30D0\\u30C3\\u30AF\\u30A8\\u30F3\\u30C9\\u753B\\u50CF\",\n      className: \"backend-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u5224\\u5B9A\\u4E2D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(BackendImage, \"jrYKMFjku8ShvY1MozYTs3QY8Z0=\");\n_c = BackendImage;\nexport default BackendImage;\nvar _c;\n$RefreshReg$(_c, \"BackendImage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BackendImage","_s","backendImageSrc","setBackendImageSrc","fetchBackendImage","response","fetch","ok","blob","imageUrl","URL","createObjectURL","console","error","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/frontend/src/BackendImage.tsx"],"sourcesContent":["// export default BackendImage;\n\nimport React, { useState, useEffect } from 'react';\n\nconst BackendImage: React.FC = () => {\n  const [backendImageSrc, setBackendImageSrc] = useState<string | null>(null);\n\n  // バックエンドから画像を取得する関数\n  const fetchBackendImage = async () => {\n    try {\n      const response = await fetch('http://server:5000/predict'); // バックエンドのエンドポイント\n      if (response.ok) {\n        // Blob形式で画像を取得\n        const blob = await response.blob();\n        \n        // BlobをURLに変換\n        const imageUrl = URL.createObjectURL(blob);\n        setBackendImageSrc(imageUrl); // 画像URLをstateにセット\n      } else {\n        console.error('画像を取得できませんでした');\n      }\n    } catch (error) {\n      console.error('画像の取得に失敗しました:', error);\n    }\n  };\n\n  // 初回レンダリング時に画像をバックエンドから取得\n  useEffect(() => {\n    fetchBackendImage(); // 画像を取得\n  }, []); // 初回レンダリング時に実行\n\n  return (\n    <div className=\"backend-image-area\">\n      {backendImageSrc ? (\n        <img src={backendImageSrc} alt=\"バックエンド画像\" className=\"backend-image\" />\n      ) : (\n        <div className=\"loading-container\">\n            <div className=\"loading-spinner\"></div> {/* ローディングアニメーション */}\n            <p>判定中</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BackendImage;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGP,QAAQ,CAAgB,IAAI,CAAC;;EAE3E;EACA,MAAMQ,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC,CAAC,CAAC;MAC5D,IAAID,QAAQ,CAACE,EAAE,EAAE;QACf;QACA,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACG,IAAI,CAAC,CAAC;;QAElC;QACA,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;QAC1CL,kBAAkB,CAACM,QAAQ,CAAC,CAAC,CAAC;MAChC,CAAC,MAAM;QACLG,OAAO,CAACC,KAAK,CAAC,eAAe,CAAC;MAChC;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC;EACF,CAAC;;EAED;EACAhB,SAAS,CAAC,MAAM;IACdO,iBAAiB,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKe,SAAS,EAAC,oBAAoB;IAAAC,QAAA,EAChCb,eAAe,gBACdH,OAAA;MAAKiB,GAAG,EAAEd,eAAgB;MAACe,GAAG,EAAC,kDAAU;MAACH,SAAS,EAAC;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEtEtB,OAAA;MAAKe,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAC9BhB,OAAA;QAAKe,SAAS,EAAC;MAAiB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,KAAC,eACxCtB,OAAA;QAAAgB,QAAA,EAAG;MAAG;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpB,EAAA,CAvCID,YAAsB;AAAAsB,EAAA,GAAtBtB,YAAsB;AAyC5B,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}